C51 COMPILER V9.59.0.0   MAIN                                                              11/29/2019 11:25:14 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\object\MAIN.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MAIN.C LARGE OBJECTADVANCED OPTIMIZE(11,SPEED) REGFILE(.\object\verifica
                    -dor1.0.ORC) BROWSE DEFINE(XTAL=11059200) DEBUG TABS(2) OBJECT(.\object\MAIN.obj)

line level    source

   1          /*------------------------------------------------------------------------------
   2          MAIN.C:  sistema verificador
   3          
   4          Diseñado Ing. Jaime Pedraza
   5          ------------------------------------------------------------------------------*/
   6          #include <main.h>
   7          /*------------------------------------------------------------------------------
   8          interrupcion por timer 
   9          ValTimeOutCom se decrementa cada overflow de la interrupcion
  10          Timer_wait    Incrementa cada overflow de la interrrupcion
  11          ------------------------------------------------------------------------------*/
  12           timer0_int() interrupt 1 using 2
  13              {
  14   1            
  15   1            ValTimeOutCom--;
  16   1            Timer_wait++;
  17   1            TF0=0;
  18   1            
  19   1          }
  20          /*------------------------------------------------------------------------------
  21          ------------------------------------------------------------------------------*/
  22          void ini_timer(void)
  23          {
  24   1      
  25   1        TMOD=(TMOD & 0xF0) | 0x01;// configuro el reg TMOD sin precalador a 16 bits
  26   1          
  27   1        TH0=0X00;               //registro de la parte alta del timer0 de 16 bits                 *           
  28   1        TL0=0X00;               // registro de la parte baja del timer0
  29   1        TR0=1;                  // habilita el timer0 reg TCOM bit 4 para interrup
  30   1      
  31   1      }
  32          /*------------------------------------------------------------------------------
  33          ------------------------------------------------------------------------------*/
  34          void on_Timer0_Interrup(void)
  35          {
  36   1        TF0=0;                  //registro TCON bit 5 bandera de overflow 
  37   1        ET0=1;                  // enable interrupcion bit 1 del registro IENO
  38   1        
  39   1      }
  40          /*------------------------------------------------------------------------------
  41          ------------------------------------------------------------------------------*/
  42          void off_Timer0_Interrup(void)
  43          {
  44   1        ET0=0;                  // enable interrupcion bit 1 del registro IENO
  45   1        
  46   1      }
  47          /*------------------------------------------------------------------------------
  48          ------------------------------------------------------------------------------*/
  49          /*------------------------------------------------------------------------------
  50          _getkey waits until a character is received from the serial port.  This may not
  51          be the exact desired operation (for example if the buffer is empty, this
  52          function hangs waiting for a character to be received).
  53          ------------------------------------------------------------------------------*/
  54          char _getkey (void)
C51 COMPILER V9.59.0.0   MAIN                                                              11/29/2019 11:25:14 PAGE 2   

  55          {
  56   1      int k;
  57   1      
  58   1      do
  59   1        {
  60   2        k = com_getchar ();
  61   2        }
  62   1      while (k == -1);
  63   1      
  64   1      return ((unsigned char) k);
  65   1      }
  66          
  67          /*------------------------------------------------------------------------------
  68          ------------------------------------------------------------------------------*/
  69          char putchar (char c)
  70          {
  71   1      volatile unsigned int i;
  72   1      
  73   1      while (com_putchar (c) != 0)
  74   1        {
  75   2        for (i=0; i<1000; i++)
  76   2          {
  77   3          /*** DO NOTHING ***/
  78   3          }
  79   2        }
  80   1      
  81   1      return (c);
  82   1      }
  83          /*------------------------------------------------------------------------------
  84          escribir una cadena de datos por pto serie
  85          ------------------------------------------------------------------------------*/
  86          void EscribirCadenaSoft_buffer(unsigned char *buffer,unsigned char tamano_cadena)
  87          {
  88   1        unsigned char i,d;
  89   1          for(i=0;i<tamano_cadena;i++)
  90   1          {
  91   2            d=putchar(*buffer);
  92   2            buffer++;
  93   2          }
  94   1      }
  95          /*
  96          unsigned char recibe_cmd_LPR(unsigned char *buffer_cmd)
  97          {
  98             unsigned char j, MaxChrRx;
  99             unsigned int contador;
 100            
 101             bit time_out;
 102             
 103             MaxChrRx=11;
 104          
 105            
 106                for (j=0; j<MaxChrRx; j++)
 107                {
 108                  contador=0;
 109                  time_out=0;
 110                  while ((rx_ip==1)&&(time_out==0))
 111                  {
 112                    contador++;
 113                    if (contador>65000)
 114                    {
 115                      time_out=1;
 116                      
C51 COMPILER V9.59.0.0   MAIN                                                              11/29/2019 11:25:14 PAGE 3   

 117                    }       
 118                  }
 119                  if(time_out==1)break;
 120                    
 121                    *buffer_cmd=rx_Data();
 122                      buffer_cmd++;
 123                }
 124          
 125                *buffer_cmd=0;
 126                return j;
 127          }
 128          /*------------------------------------------------------------------------------
 129          Rutina de las condiciones iniciales del board
 130          ------------------------------------------------------------------------------*/
 131          void inicia_board(void)
 132          {
 133   1      cond_ini_tibbo();             /* inicia tibbo*/
 134   1      cond_ini_clock();             /* inicia clock*/
 135   1      cond_ini_pto();               /*Inicializacion del pto*/
 136   1      Atascado=0;                   /*prendo el verificador*/
 137   1      sel_com=1;                    /*seleccionar el pto serie */
 138   1      lock=0;                       /*barrera off*/ 
 139   1        
 140   1      }
 141          
 142          /*------------------------------------------------------------------------------
 143          Rutina que lee la eeprom, los bit de configuracion 
 144          ------------------------------------------------------------------------------*/
 145          void variable_inicio()
 146          {
 147   1        
 148   1        ID_CLIENTE=rd_eeprom(0xa8,EE_ID_CLIENTE); 
 149   1        COD_PARK=rd_eeprom(0xa8,EE_ID_PARK);
 150   1        T_GRACIA=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);
 151   1        SIN_COBRO=rd_eeprom(0xa8,EE_SIN_COBRO);
 152   1        Debug_Tibbo=rd_eeprom(0xa8,EE_DEBUG);
 153   1        USE_LPR=rd_eeprom(0xa8,EE_USE_LPR);
 154   1        COMPARACION_ACTIVA=rd_eeprom(0xa8,EE_CPRCN_ACTIVA);
 155   1      }
 156          /*------------------------------------------------------------------------------
 157          Note that the two function above, _getkey and putchar, replace the library
 158          functions of the same name.  These functions use the interrupt-driven serial
 159          I/O routines in SIO.C.
 160          ------------------------------------------------------------------------------*/
 161          
 162          
 163          void main (void)
 164          {
 165   1        
 166   1        static unsigned char buffer[40];
 167   1      //  unsigned char buffer_clock[]={0x02,0x31,0x48,0x32,0x32,0x2f,0x30,0x33,0x2f,0X32,0X30,0X31,0X39,0x20,0x3
             -1,0x31,0x3a,0x33,0x39,0x3a,0x30,0x30,0x20,0x34,0x03,0}; //dia,mes,año,hora,minutos,SEGUNDOS,Dia de la semana
 168   1        unsigned char S1_B2[]={0x13, 0x03, 0x1D, 0x0B, 0x0E, 00, 00, 00, 00, 00, 0x01, 0x13, 0x03, 0x1D, 0x0E, 0x
             -1D};
 169   1        unsigned char S1_B0[]={0x32, 0x31, 0x30, 0x37, 0x31, 0x35, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01};
 170   1      
 171   1          char Length_trama;
 172   1      ini_timer();                                                              /* initialize interrupt timer0 */
 173   1      on_Timer0_Interrup();                                                     /* habilita el  timer0 */
 174   1      com_initialize ();                                                        /* initialize pto serie */
 175   1      com_baudrate ();                                                          /* setup for 9600 baud */
 176   1      inicia_board();                                                           /*Rutina de las condiciones iniciales del board*/
C51 COMPILER V9.59.0.0   MAIN                                                              11/29/2019 11:25:14 PAGE 4   

 177   1      EA = 1;                                                                   /* Enable Interrupts global*/
 178   1      
 179   1      time_bit();                                                               /*solo para pruebas*/
 180   1      Delay_20us(33);
 181   1      time_mbit();
 182   1      tx_aux('a');  
 183   1        
 184   1      sel_Funcion();                                                              /*el pulsador funcion es el cmd q da la entrada a programacio
             -n */
 185   1        
 186   1        if (DataIn==0)              
 187   1        {
 188   2        menu();                                                                   /*menu de configuracion*/
 189   2        }
 190   1        variable_inicio();                                                        /*leo y cargo  las variables de inicio de configuracion*/
 191   1      while(Secuencia_inicio_expedidor());                                        /* procedimiento de inicio de transporte (reset, y
             - grabar eeprom)*/
 192   1        ValTimeOutCom=1;
 193   1                                                    
 194   1        while (1)                                                                 /* Loop Principal               */  
 195   1        {   
 196   2        
 197   2          if(Tarjeta_on==1)
 198   2          {
 199   3           SecuenciaExpedidor();                                          /* procedimiento del transporte*/ 
 200   3          }
 201   2          else
 202   2          {         
 203   3              if (rx_ip==0)                                                         /*pregunto si llega datos de monitor pto serie emulado*/
 204   3              {
 205   4              
 206   4              Length_trama=recibe_cmd_Monitor(buffer);                            /*recibe la trama en buffer y saco la longitud d
             -e la trama*/
 207   4              Debug_Dividir_texto();                                              /*se divide el texto */     
 208   4            //  printf (" recibe Trama tibbo'\r\n\r\n");
 209   4              DebugBufferMF(buffer,Length_trama,1);                               /*imprimo la trama recibida, la longitud */       
 210   4              Debug_Dividir_texto();                                              /*se divide el texto */     
 211   4              }
 212   3              
 213   3            
 214   3                
 215   3                SecuenciaExpedidor();
 216   3              
 217   3                  
 218   3                                                          
 219   3            
 220   3              if (busy==0)                                                          /*comunicacion con el pto paralelo*/
 221   3              {
 222   4            
 223   4              Length_trama=recibe_port(buffer);                                   /*recibe informacion del pto paralelo*/
 224   4              /*solo de prueba*/                                  
 225   4            //  Debug_Dividir_texto();                                              /*division del texto */
 226   4            //  Debug_txt_Tibbo((unsigned char *) "Recibe trama pto \r\n");         /*trama recibida pto paralelo */
 227   4            //  DebugBufferMF(buffer,Length_trama,1);                               /*imprimo la trama recibida*/
 228   4            //  Debug_txt_Tibbo((unsigned char *) "longitud de la trama: \r\n");    /*msj longitud de la trama */
 229   4            //  Debug_chr_Tibbo(Length_trama);                                      /*numero de caracteres recibidos*/
 230   4            //  Debug_Dividir_texto();                                              /*divido el texto*/
 231   4              
 232   4              Valida_Trama_Pto(buffer,Length_trama);                              /*valido la informacion recibida */
 233   4               
 234   4              }
 235   3            msj_lcd_informativo();                                                /*muestra la informacion de  ID cliente, cod parque, fech
C51 COMPILER V9.59.0.0   MAIN                                                              11/29/2019 11:25:14 PAGE 5   

             -a,comparacion*/
 236   3        
 237   3          }
 238   2        }
 239   1      
 240   1      }
 241          
 242          /*------------------------------------------------------------------------------
 243          ------------------------------------------------------------------------------*/
 244          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    540    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =    111      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =    100    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
