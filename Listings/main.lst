C51 COMPILER V9.59.0.0   MAIN                                                              09/07/2021 11:24:20 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*------------------------------------------------------------------------------
   2          MAIN.C:  sistema verificador
   3          
   4          Diseñado Ing. Jaime Pedraza
   5          ------------------------------------------------------------------------------*/
   6          #include <main.h>
   7          
   8          /*------------------------------------------------------------------------------
   9          interrupcion por timer 
  10          ValTimeOutCom se decrementa cada overflow de la interrupcion
  11          Timer_wait    Incrementa cada overflow de la interrrupcion
  12          clock=22.1184mhz
  13          ciclo de mqn= clock/12 =0.5nseg
  14          timer= ciclo mqn* reloj = 0.5 x65535 =32
  15          temporizado=timer* ValTimeOutCom = 32*100=320ms
  16          ------------------------------------------------------------------------------*/
  17           timer0_int() interrupt 1 using 2
  18              {
  19   1            
  20   1            ValTimeOutCom--;
  21   1            if (ValTimeOutCom == 1)
  22   1            {
  23   2              Timer_wait++;
  24   2            }
  25   1            
  26   1            Timer_tivo++;
  27   1            TF0=0;
  28   1            
  29   1          }
  30          /*------------------------------------------------------------------------------
  31          ------------------------------------------------------------------------------*/
  32          void ini_timer(void)
  33          {
  34   1      
  35   1        TMOD=(TMOD & 0xF0) | 0x01;// configuro el reg TMOD sin precalador a 16 bits
  36   1          
  37   1        TH0=0X00;               //registro de la parte alta del timer0 de 16 bits                 *           
  38   1        TL0=0X00;               // registro de la parte baja del timer0
  39   1        TR0=1;                  // habilita el timer0 reg TCOM bit 4 para interrup
  40   1      
  41   1      }
  42          /*------------------------------------------------------------------------------
  43          ------------------------------------------------------------------------------*/
  44          void on_Timer0_Interrup(void)
  45          {
  46   1        TF0=0;                  //registro TCON bit 5 bandera de overflow 
  47   1        ET0=1;                  // enable interrupcion bit 1 del registro IENO
  48   1        
  49   1      }
  50          /*------------------------------------------------------------------------------
  51          ------------------------------------------------------------------------------*/
  52          void off_Timer0_Interrup(void)
  53          {
  54   1        ET0=0;                  // enable interrupcion bit 1 del registro IENO
C51 COMPILER V9.59.0.0   MAIN                                                              09/07/2021 11:24:20 PAGE 2   

  55   1        
  56   1      }
  57          /*------------------------------------------------------------------------------
  58          ------------------------------------------------------------------------------*/
  59          /*------------------------------------------------------------------------------
  60          _getkey waits until a character is received from the serial port.  This may not
  61          be the exact desired operation (for example if the buffer is empty, this
  62          function hangs waiting for a character to be received).
  63          ------------------------------------------------------------------------------*/
  64          char _getkey (void)
  65          {
  66   1      int k;
  67   1      
  68   1      do
  69   1        {
  70   2        k = com_getchar ();
  71   2        }
  72   1      while (k == -1);
  73   1      
  74   1      return ((unsigned char) k);
  75   1      }
  76          
  77          /*------------------------------------------------------------------------------
  78          ------------------------------------------------------------------------------*/
  79          char putchar (char c)
  80          {
  81   1      volatile unsigned int i;
  82   1      
  83   1      while (com_putchar (c) != 0)
  84   1        {
  85   2        for (i=0; i<1000; i++)
  86   2          {
  87   3          /*** DO NOTHING ***/
  88   3          }
  89   2        }
  90   1      
  91   1      return (c);
  92   1      }
  93          /*------------------------------------------------------------------------------
  94          escribir una cadena de datos por pto serie
  95          ------------------------------------------------------------------------------*/
  96          void EscribirCadenaSoft_buffer(unsigned char *buffer,unsigned char tamano_cadena)
  97          {
  98   1        unsigned char i,d;
  99   1          for(i=0;i<tamano_cadena;i++)
 100   1          {
 101   2            d=putchar(*buffer);
 102   2            buffer++;
 103   2          }
 104   1      }
 105          
 106          /*------------------------------------------------------------------------------
 107          Rutina de las condiciones iniciales del board
 108          ------------------------------------------------------------------------------*/
 109          void inicia_board(void)
 110          {
 111   1      cond_ini_tibbo();             /* inicia tibbo*/
 112   1      cond_ini_clock();             /* inicia clock*/
 113   1      cond_ini_pto();               /*Inicializacion del pto*/
 114   1      Atascado_GP0_PIN_3 = 0;                   /*prendo el verificador*/
 115   1      sel_com=1;                    /*seleccionar el pto serie */
 116   1      lock=0;                       /*barrera off*/ 
C51 COMPILER V9.59.0.0   MAIN                                                              09/07/2021 11:24:20 PAGE 3   

 117   1        
 118   1      }
 119          
 120          /*------------------------------------------------------------------------------
 121          Rutina que lee la eeprom, los bit de configuracion 
 122          ------------------------------------------------------------------------------*/
 123          void variable_inicio()
 124          {
 125   1        
 126   1        
 127   1        T_GRACIA=rd_eeprom(0xa8,EE_TIEMPO_GRACIA);
 128   1        SIN_COBRO=rd_eeprom(0xa8,EE_SIN_COBRO);
 129   1        Debug_Tibbo=rd_eeprom(0xa8,EE_DEBUG);
 130   1        USE_LPR=rd_eeprom(0xa8,EE_USE_LPR);
 131   1        Raspberry = rd_eeprom(0xa8,EE_TIPO_PANTALLA);
 132   1      
 133   1      //  Debug_Tibbo = 1;
 134   1        
 135   1      }
 136          /*------------------------------------------------------------------------------
 137          Note that the two function above, _getkey and putchar, replace the library
 138          functions of the same name.  These functions use the interrupt-driven serial
 139          I/O routines in SIO.C.
 140          ------------------------------------------------------------------------------*/
 141          
 142          
 143          void main (void)
 144          {
 145   1        
 146   1        static unsigned char buffer[40];
 147   1        static unsigned char Estado_Comunicacion_Secuencia_MF=SEQ_INICIO;
 148   1        unsigned char Length_trama;
 149   1      
 150   1        
 151   1      ini_timer();                                                              /* initialize interrupt timer0 */
 152   1      on_Timer0_Interrup();                                                     /* habilita el  timer0 */
 153   1      com_initialize ();                                                        /* initialize pto serie */
 154   1      com_baudrate ();                                                          /* setup for 9600 baud */
 155   1      inicia_board();                                                           /*Rutina de las condiciones iniciales del board*/
 156   1      EA = 1;                                                                   /* Enable Interrupts global*/
 157   1      
 158   1      time_bit();                                                               /*solo para pruebas*/
 159   1      Delay_20us(33);
 160   1      time_mbit();
 161   1      
 162   1      tx_aux('a');  
 163   1      led_err_imp =1;
 164   1      sel_Funcion();                                                              /*el pulsador funcion es el cmd q da la entrada a programacio
             -n */
 165   1      
 166   1        if (DataIn==0)              
 167   1        {
 168   2        menu();                                                                   /*menu de configuracion*/
 169   2        }
 170   1      
 171   1      
 172   1        variable_inicio();                                                        /*leo y cargo  las variables de inicio de configuracion*/
 173   1      while(Secuencia_inicio_expedidor());                                        /* procedimiento de inicio de transporte (reset, y
             - grabar eeprom)*/
 174   1        ValTimeOutCom=TIME_CARD;
 175   1                                                    
 176   1        while (1)                                                                 /* Loop Principal               */  
C51 COMPILER V9.59.0.0   MAIN                                                              09/07/2021 11:24:20 PAGE 4   

 177   1        {   
 178   2            
 179   2              if (rx_ip==0)                                                         /*pregunto si llega datos de monitor pto serie emulado*/
 180   2              {
 181   3                 Rx_Monitor();
 182   3              }
 183   2          
 184   2            
 185   2                
 186   2              Estado_Comunicacion_Secuencia_MF=SecuenciaExpedidorMF(Estado_Comunicacion_Secuencia_MF);          //Secuenc
             -iaExpedidor();
 187   2              
 188   2                  
 189   2                                                          
 190   2            
 191   2              if ((busy == 0) && (pto_paraleo == 0))                              /*comunicacion con el pto paralelo*/
 192   2              {
 193   3            
 194   3              Length_trama=recibe_port(buffer);                                   /*recibe informacion del pto paralelo*/
 195   3              
 196   3                  /*solo de prueba*/    
 197   3              Debug_pto_paralelo(buffer,Length_trama);        
 198   3              Valida_Trama_Pto(buffer,Length_trama);                                /*valido la informacion recibida */
 199   3              
 200   3                  
 201   3              
 202   3               
 203   3              }
 204   2          msj_lcd_informativo();                                                  /*muestra la informacion de  ID cliente, cod parque, fech
             -a,comparacion*/
 205   2        
 206   2      
 207   2          }
 208   1      }
 209          
 210          
 211          
 212          /*------------------------------------------------------------------------------
 213          ------------------------------------------------------------------------------*/
 214          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    436    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    110      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     70    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
