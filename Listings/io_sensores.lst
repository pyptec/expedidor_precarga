C51 COMPILER V9.59.0.0   IO_SENSORES                                                       07/21/2020 12:52:07 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE IO_SENSORES
OBJECT MODULE PLACED IN .\Objects\io_sensores.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE io_sensores.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\io_sensores.lst) TABS(2) OBJECT(.\Objects\io_sensores.obj)

line level    source

   1          
   2          #include <io_sensores.h>
   3          #include <reg51.h>
   4          
   5          /*funciones externas*/
   6          extern void Debug_txt_Tibbo(unsigned char * str);
   7          extern void load_and_send_info_reloj();
   8          extern void load_and_send_id_cod();
   9          extern void send_portERR(unsigned char cod_err);
  10          extern unsigned char rd_eeprom (unsigned char control,unsigned int Dir); 
  11          
  12          sbit DataIn = P1^1;         //      
  13          sbit sel_A = P3^5;          //Pulsador                        *
  14          sbit sel_B = P3^6;          //Entrada Sensor 2                    *
  15          sbit sel_C = P3^7;          //Entrada Sensor 1                    *
  16          sbit busy = P3^3;           /*bussy de Entrada Interrupcion del Procesador principal      */
  17          
  18          #define NO_TIFIQUE_EVP      'N'
  19          #define SI_NOTIFIQUE_EVP    'S'
  20          
  21          #define AUTOMOVIL           0X00
  22          #define MOTO                0X01
  23          /*datos en eeprom*/
  24          #define EE_CPRCN_ACTIVA       0x000C
  25          #define EE_ADDRESS_HIGH_BOARD   0X0012
  26          
  27          extern bit COMPARACION_ACTIVA;
  28          extern  unsigned char Tipo_Vehiculo;
  29          
  30          //***************************************************************************************************
  31          void sel_Funcion(void)
  32          {
  33   1        sel_A=0;
  34   1        sel_B=0;
  35   1        sel_C=0;
  36   1      }
  37          //***************************************************************************************************
  38          void sel_Auto(void)
  39          {
  40   1        sel_A=0;
  41   1        sel_B=1;
  42   1        sel_C=0;
  43   1      }
  44          //***************************************************************************************************
  45          void sel_Pulsa(void)
  46          {
  47   1        sel_A=1;
  48   1        sel_B=1;
  49   1        sel_C=0;
  50   1      }
  51          
  52          //***************************************************************************************************
  53          void sel_Sensor2(void)
  54          {
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       07/21/2020 12:52:07 PAGE 2   

  55   1        sel_A=0;
  56   1        sel_B=0;
  57   1        sel_C=1;
  58   1      }
  59          //***************************************************************************************************
  60          void sel_Sensor1(void)
  61          {
  62   1        sel_A=1;
  63   1        sel_B=0;
  64   1        sel_C=1;
  65   1      }
  66          //***************************************************************************************************
  67          void sel_Dir1(void)
  68          {
  69   1        sel_A=0;
  70   1        sel_B=1;
  71   1        sel_C=1;
  72   1      }
  73          //***************************************************************************************************
  74          void sel_Dir2(void)
  75          {
  76   1        sel_A=1;
  77   1        sel_B=1;
  78   1        sel_C=1;
  79   1      }
  80          
  81          char ValidaSensor(void)
  82          {
  83   1        
  84   1      char  Valido=0;
  85   1      int Tmin=500;
  86   1        while ((DataIn==1)&&(Valido==0))
  87   1        {
  88   2          Tmin--;
  89   2          if (Tmin==0)
  90   2          {
  91   3             Valido=1;
  92   3          }
  93   2        }
  94   1        return Valido;
  95   1      }
  96          /*------------------------------------------------------------------------------
  97          Funcion q debuelve la direccion de la tarjeta
  98          ------------------------------------------------------------------------------*/
  99          unsigned char Dir_board()
 100          {
 101   1        unsigned char Board=0x01;
 102   1        unsigned char Board_High;
 103   1        sel_Dir1();
 104   1        if (DataIn==1)
 105   1        {
 106   2          Board++;
 107   2        }
 108   1        sel_Dir2();
 109   1        if (DataIn==1)
 110   1        {
 111   2          Board=Board+2;
 112   2        }
 113   1        if(Board == 0x01)
 114   1        { 
 115   2        Board_High=rd_eeprom(0xa8,EE_ADDRESS_HIGH_BOARD);
 116   2        
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       07/21/2020 12:52:07 PAGE 3   

 117   2          if(Board_High != 0)
 118   2          {
 119   3            if(Board_High == 0xff)
 120   3            {
 121   4              Board=0x01;
 122   4            }
 123   3            else  Board= Board_High ;
 124   3          } 
 125   2        
 126   2        }
 127   1        return (Board+0x30);
 128   1      }
 129          /*------------------------------------------------------------------------------
 130          Funcion q debuelve la direccion de la tarjeta
 131          ------------------------------------------------------------------------------*/
 132          unsigned char Valida_Sensor1_Auto()
 133          {
 134   1        unsigned char sensor; 
 135   1              sel_Sensor1();  
 136   1              if (DataIn==0)                            // sensor1  se encuentra activo puede ser carro, si esta inhabilitado debe
             - ser moto          
 137   1              {  sel_Auto();
 138   2                if (DataIn==0)
 139   2                {                                         // sensor Auto activo es un carro 
 140   3                   Debug_txt_Tibbo((unsigned char *) "Sensores Auto y sensor1 activos.\n\r");
 141   3                   Tipo_Vehiculo=AUTOMOVIL;
 142   3                  sensor= 0xff;
 143   3                  
 144   3                }
 145   2                else
 146   2                {
 147   3                    Debug_txt_Tibbo((unsigned char *) "Sensor activo sensor1.\n\r");
 148   3                    Tipo_Vehiculo=MOTO;
 149   3                    sensor=  0xff ;
 150   3                }
 151   2                  
 152   2                  
 153   2              }
 154   1              else
 155   1              {   sel_Auto();
 156   2                if (DataIn==0)
 157   2                {
 158   3                
 159   3                Debug_txt_Tibbo((unsigned char *) "Detectado. Sensor Auto.\n\r");
 160   3                  Tipo_Vehiculo=MOTO;
 161   3                  sensor= 0xff; 
 162   3                }
 163   2                else
 164   2                {
 165   3                  Debug_txt_Tibbo((unsigned char *) "Sensores no detectados.\n\r");
 166   3                  sensor=  0x00;  
 167   3                }
 168   2                  
 169   2      
 170   2              }
 171   1              return sensor;
 172   1      }
 173          /*------------------------------------------------------------------------------
 174          Detecto la activacion de los sensores de salida
 175          ------------------------------------------------------------------------------*/
 176          
 177          unsigned char  ValidaSensoresPaso(void)
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       07/21/2020 12:52:07 PAGE 4   

 178          {
 179   1       unsigned char sensor;
 180   1          sel_Sensor2();                                //garantiso q la barrera se encuentre en posicion baja  
 181   1            if ((DataIn==1))        
 182   1          {  
 183   2            if (ValidaSensor()==1)
 184   2            {
 185   3              sensor=Valida_Sensor1_Auto();
 186   3        
 187   3            }
 188   2            else 
 189   2            {
 190   3              Debug_txt_Tibbo((unsigned char *) "Vehiculo Esperando Salir.\n\r");
 191   3              return 0x00;
 192   3            }
 193   2          }else 
 194   1          {
 195   2          Debug_txt_Tibbo((unsigned char *) "Vehiculo Saliendo. Un momento.\n\r");
 196   2          return 0x00;
 197   2          }
 198   1        return sensor;
 199   1      }
 200          
 201          
 202            
 203          /*------------------------------------------------------------------------------
 204          funcion de msj en lcd de informacion
 205          toggle=0    envia por el pto paralelo STX, cmd (i), año, mes, dia, hora, minutos, seg, dia de la semana, ETX
 206          toggle=1    
 207          toggle=2    envia ID y COD_PARK   por el pto paralelo STX, cmd (D), ID_CLIENTE, COD_CLIENTE, ETX  
 208          ------------------------------------------------------------------------------*/
 209           void msj_lcd_informativo()
 210           {
 211   1       unsigned char info=0;
 212   1       static unsigned char toggle=0;
 213   1            sel_Funcion();                                  /*el pulsador funcion es el cmd q visualiza la informacion tres */
 214   1          if (DataIn==0)
 215   1          {
 216   2             if ((toggle==0)&&(info==0))                    /*primer pulso de funcion*/
 217   2            {
 218   3             if (busy==1)                                   /*habilito transmicion pto paralelo*/
 219   3              {
 220   4                info=1;                                     /*incremento info para ser limpiado cuando se suelte el pulsador*/
 221   4                load_and_send_info_reloj();                 /*se envia el reloj al lcd */
 222   4                toggle=1;                                   /*incremento a toggle para el proximo pulso sea otra opcion*/
 223   4              }
 224   3             }    
 225   2              else if((toggle==1)&&(info==0))
 226   2              {
 227   3                if (busy==1)
 228   3                {
 229   4                info=1;
 230   4                load_and_send_id_cod();                   /*muestro el codigo e id del cliente configurado*/
 231   4                toggle=2;
 232   4                }
 233   3              }
 234   2              else if ((toggle==2)&&(info==0))
 235   2              {
 236   3                if (busy==1)
 237   3                {
 238   4                info=1;
 239   4                  if(rd_eeprom(0xa8,EE_CPRCN_ACTIVA)==1)    /*se muestra si hay comparacion activa si o no*/
C51 COMPILER V9.59.0.0   IO_SENSORES                                                       07/21/2020 12:52:07 PAGE 5   

 240   4                  {
 241   5                    send_portERR(SI_NOTIFIQUE_EVP);
 242   5                  }else {send_portERR(NO_TIFIQUE_EVP);}
 243   4                  
 244   4                toggle=0;
 245   4                }
 246   3              
 247   3              }
 248   2            
 249   2            }
 250   1          
 251   1          sel_Funcion();                  // el antirebote
 252   1          if (DataIn==1)
 253   1          {
 254   2            info=0;
 255   2          }
 256   1      
 257   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    419    ----
   CONSTANT SIZE    =    173    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
