C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/29/2019 11:25:15 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PANTALLAS
OBJECT MODULE PLACED IN .\object\pantallas.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pantallas.c LARGE OBJECTADVANCED OPTIMIZE(11,SPEED) REGFILE(.\object\ver
                    -ificador1.0.ORC) BROWSE DEFINE(XTAL=11059200) DEBUG TABS(2) OBJECT(.\object\pantallas.obj)

line level    source

   1          #include<pantallas.h>
   2          #include <reg51.h>
   3          #include <string.h>
   4          
   5          sbit sel_com = P0^7;        //Micro switch    
   6          
   7          
   8          /*funciones externas*/
   9          extern char putchar (char c);
  10          extern void Block_read_Clock(unsigned char *datos_clock);
  11          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  12          extern void Debug_Dividir_texto();
  13          extern void clean_tx();
  14          
  15          
  16          #define ERROR_LOOP              0XE0
  17          #define TARJETA_INVALIDA        0XE1
  18          #define TARJETA_SIN_FORMATO     0xDF
  19          #define ERROR_COD_PARK          0XE5
  20          #define SIN_INGRESO             0XE6
  21          #define SIN_PAGO                0XE7
  22          #define EXCEDE_GRACIA           0XE8
  23          #define FUERA_DE_LINEA          0XB6
  24          #define LECTURA_DE_TARJETAS     0xB0
  25          
  26          
  27          #define BIENVENIDO              0XFE
  28          #define GRACIAS                 0XFF
  29          
  30          #define NOTIFIQUE_EVP           'N'
  31          #define NO_NOTIFIQUE_EVP        'S'
  32          #define COMPARANDO_PLACA        'P'           /*msj de eeror de placa*/
  33          #define ENVIANDO_COD            'D'
  34          #define INFO1                   'I'
  35          #define INFO2                   'i'
  36          
  37          
  38          /*------------------------------------------------------------------------------
  39          transmite el caracter pto serie
  40          data_com = al caracter a escribir
  41          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  42          ------------------------------------------------------------------------------*/
  43          void tx_chrlcd (unsigned char data_com, unsigned char enable_char_add)
  44          {
  45   1        unsigned char d;
  46   1        d=putchar(data_com);
  47   1        if (enable_char_add != 0) d=putchar(0x00);
  48   1        
  49   1      }
  50          /*------------------------------------------------------------------------------
  51          envia un msj asta null(0)
  52          msg= apuntador del msj
  53          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  54          ------------------------------------------------------------------------------*/
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/29/2019 11:25:15 PAGE 2   

  55          void LCD_txt (unsigned char * msg,unsigned char enable_char_add )
  56          {
  57   1        unsigned char i;
  58   1         
  59   1        for (i=0; msg[i] != '\0'; i++)
  60   1        {
  61   2          tx_chrlcd(msg[i],enable_char_add);
  62   2        }
  63   1      }
  64          /*------------------------------------------------------------------------------
  65          Escribo el reloj en ascii en bloque 
  66          msg= apuntador del msj
  67          length_char longitud de la tram
  68          enable_char_add = si esta en (1) envia un null (0) adicional, si es (0) no envia caracter adicional
  69          ------------------------------------------------------------------------------*/
  70          void LCD_txt_num_char(unsigned char * msg,unsigned char length_char, unsigned char enable_char_add)
  71          {
  72   1        unsigned char i;
  73   1         
  74   1        for (i=0; i<length_char; i++)
  75   1        {
  76   2          tx_chrlcd(msg[i],enable_char_add);
  77   2        }
  78   1      }
  79          /*------------------------------------------------------------------------------
  80          Escribo el reloj en ascii en bloque 
  81          AA 80 28 trama de inicio de configuracion de la pantalla
  82          07 numero de caracteres de la trama de reloj
  83          20 19 03 26 09 21 20  el dato del reloj
  84          ------------------------------------------------------------------------------*/
  85          void Reloj_Pantalla_Lcd()
  86          {
  87   1      
  88   1       unsigned char Ini_Clock_LCD   []={0xaa,0x80,0x28,0x07,0x20,0x00,0,0,0,0,20,0,0} ;
  89   1                sel_com=0;                                                                      /*switch del pto serie a la pantalla*/
  90   1                Block_read_Clock(Ini_Clock_LCD+5);                                              /*Leo el reloj programado*/
  91   1                //Debug_Dividir_texto();                                                          /*lineas de separacion del texto*/
  92   1                //DebugBufferMF(Ini_Clock_LCD,12,0);                                              /*muestra la trama por debug*/
  93   1                //Debug_Dividir_texto();                                                          /*linea de separacion de texto*/
  94   1                REN = 0;                                                                        /*inhabilita recepcion de datos*/
  95   1                LCD_txt_num_char(Ini_Clock_LCD,13,0);                                           /*cmd de inicializacion del reloj del lcd*
             -/
  96   1                                                            
  97   1                REN = 1;                                                                        /*habilita recepcion de datos*/
  98   1                sel_com=1;                                                                      /*switch pto serie a verificador o expedidor */
  99   1      }
 100          /*------------------------------------------------------------------------------
 101          Rutina de msj de pantalla
 102          ------------------------------------------------------------------------------*/
 103          void PantallaLCD(unsigned char cod_msg)
 104          {
 105   1      
 106   1      unsigned char Ini_LCD_Line_one   []={0xaa,0x80,0x18,0x01,0x02,0x00} ;
 107   1      //unsigned char Ini_LCD_Line_two   []={0xaa,0x80,0x18,0x02,0x02,0x00} ;
 108   1      //unsigned char Ini_Off_Line []={0xaa,0x80,0x18,0x01,0x03,0x00} ;
 109   1        
 110   1      unsigned char num_chr;
 111   1      
 112   1        
 113   1          sel_com=0;
 114   1        
 115   1          //if (Raspberry==0)
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/29/2019 11:25:15 PAGE 3   

 116   1          //{
 117   1            LCD_txt (Ini_LCD_Line_one,0);
 118   1            
 119   1            switch (cod_msg)
 120   1            {
 121   2          
 122   2              case 'P':
 123   2                
 124   2                num_chr=strlen((unsigned char *) "ERROR: VALIDANDO PLACA... ");
 125   2                tx_chrlcd(0x00,0);
 126   2                tx_chrlcd(num_chr*2,0);
 127   2                LCD_txt ((unsigned char *)       "ERROR: VALIDANDO PLACA... ",1);
 128   2                
 129   2                break;
 130   2      
 131   2              case ERROR_LOOP:
 132   2                
 133   2                num_chr=strlen((unsigned char *) "ERROR: LOOP1 SIN PRESENCIA VEHICULAR ");  
 134   2                tx_chrlcd(0x00,0);
 135   2                tx_chrlcd(num_chr*2,0);
 136   2                LCD_txt ((unsigned char *)       "ERROR: LOOP1 SIN PRESENCIA VEHICULAR ",1);
 137   2                
 138   2                break;
 139   2              
 140   2              case TARJETA_INVALIDA:
 141   2                
 142   2                num_chr=strlen((unsigned char *) "ERROR: TARJETA INVALIDA "); 
 143   2                tx_chrlcd(0x00,0);
 144   2                tx_chrlcd(num_chr*2,0);
 145   2                LCD_txt ((unsigned char *)       "ERROR: TARJETA INVALIDA ",1);
 146   2                
 147   2                break;
 148   2              
 149   2              case ERROR_COD_PARK:
 150   2          
 151   2                num_chr=strlen((unsigned char *) "TARJETA NO ES DEL PARQ. ");
 152   2                tx_chrlcd(0x00,0);
 153   2                tx_chrlcd(num_chr*2,0);
 154   2                LCD_txt ((unsigned char *)       "TARJETA NO ES DEL PARQ. ",1);
 155   2          
 156   2                break;
 157   2                
 158   2              case TARJETA_SIN_FORMATO:
 159   2          
 160   2                num_chr=strlen((unsigned char *) "TARJETA SIN FORMATO ");
 161   2                tx_chrlcd(0x00,0);
 162   2                tx_chrlcd(num_chr*2,0);
 163   2                LCD_txt((unsigned char *)        "TARJETA SIN FORMATO ",1);
 164   2      
 165   2                break;
 166   2                
 167   2              case SIN_PAGO:
 168   2          
 169   2                num_chr=strlen((unsigned char *) "TARJETA NO REGISTRA PAGO ");
 170   2                tx_chrlcd(0x00,0);
 171   2                tx_chrlcd(num_chr*2,0);
 172   2                LCD_txt ((unsigned char *)       "TARJETA NO REGISTRA PAGO ",1);
 173   2      
 174   2                break;
 175   2                  
 176   2              case EXCEDE_GRACIA:
 177   2          
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/29/2019 11:25:15 PAGE 4   

 178   2                num_chr=strlen((unsigned char *) "EXCEDE TIEMPO DE GRACIA ");
 179   2                tx_chrlcd(0x00,0);
 180   2                tx_chrlcd(num_chr*2,0);
 181   2                LCD_txt ((unsigned char *)       "EXCEDE TIEMPO DE GRACIA ",1);
 182   2            
 183   2                break;
 184   2              
 185   2              case  FUERA_DE_LINEA:
 186   2                
 187   2                num_chr=strlen((unsigned char *) "FUERA DE LINEA ");
 188   2                tx_chrlcd(0x00,0);
 189   2                tx_chrlcd(num_chr*2,0);
 190   2                LCD_txt((unsigned char *)        "FUERA DE LINEA ",1);
 191   2              
 192   2                break;
 193   2              
 194   2              case  BIENVENIDO:
 195   2                
 196   2                num_chr=strlen((unsigned char *) "BIENVENIDO ");
 197   2                tx_chrlcd(0x00,0);
 198   2                tx_chrlcd(num_chr*2,0);
 199   2                LCD_txt((unsigned char *)        "BIENVENIDO ",1);
 200   2                
 201   2                break;
 202   2              
 203   2              case  SIN_INGRESO:
 204   2                
 205   2                num_chr=strlen((unsigned char *) "ERROR: SIN INGRESO ");
 206   2                tx_chrlcd(0x00,0);
 207   2                tx_chrlcd(num_chr*2,0);
 208   2                LCD_txt((unsigned char *)        "ERROR: SIN INGRESO ",1);
 209   2                
 210   2                break;
 211   2                      
 212   2        }
 213   1              sel_com=1;  
 214   1      }
 215          void PantallaLCD_LINEA_2(unsigned char cod_msg, unsigned char *buffer)
 216          {
 217   1        
 218   1      unsigned char Ini_LCD_Line_one   []={0xaa,0x80,0x18,0x01,0x02,0x00} ;
 219   1      
 220   1      
 221   1      unsigned char num_chr;
 222   1        
 223   1      sel_com=0;
 224   1        
 225   1          //if (Raspberry==0)
 226   1          //{
 227   1          
 228   1            
 229   1            switch (cod_msg)
 230   1            {
 231   2          
 232   2              case  LECTURA_DE_TARJETAS:
 233   2                LCD_txt (Ini_LCD_Line_one,0);
 234   2                num_chr=strlen((unsigned char *) "WIEGAND ");
 235   2                num_chr=num_chr+strlen(buffer)+1;
 236   2                tx_chrlcd(0x00,0);
 237   2                tx_chrlcd(num_chr*2,0);
 238   2                LCD_txt((unsigned char *)        "WIEGAND ",1);                       /*funcion q trasmite el msj al LCD  y el 
             -(1) coloca los caracteres NULL*/
C51 COMPILER V9.59.0.0   PANTALLAS                                                         11/29/2019 11:25:15 PAGE 5   

 239   2                LCD_txt(buffer,1);                                                    /*funcion q trasmite el msj al LCD  y el (1) coloca los 
             -caracteres NULL*/
 240   2                
 241   2              
 242   2              
 243   2              
 244   2                break;
 245   2              
 246   2              
 247   2        }
 248   1              sel_com=1;  
 249   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    857    ----
   CONSTANT SIZE    =    269    ----
   XDATA SIZE       =   ----      45
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
