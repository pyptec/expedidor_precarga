C51 COMPILER V9.59.0.0   LINTECH                                                           05/21/2020 14:05:11 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LINTECH
OBJECT MODULE PLACED IN .\Objects\lintech.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lintech.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\lintech.lst) TABS(2) OBJECT(.\Objects\lintech.obj)

line level    source

   1          #include<lintech.h>
   2          /*----------------------------------------------------------------------------
   3          tiempo de delay entre funciones
   4          ------------------------------------------------------------------------------*/
   5          
   6          #define   TIME_CARD         100   //50
   7          
   8          /*----------------------------------------------------------------------------
   9          definicion de datos de trama lintech
  10          ------------------------------------------------------------------------------*/
  11          
  12          #define   ETX               03
  13          #define   STX_LINTECH       0xf2
  14          /*------------------------------------------------------------------------------
  15          Definicion de Lintech en el comando Inicializa
  16          ------------------------------------------------------------------------------*/
  17          
  18          #define TO_FRONT        '0'
  19          #define CAPTURE_BOX     '1'
  20          #define SIN_MOVIMIENTO  '3'
  21          
  22          /*------------------------------------------------------------------------------
  23           definiciones de lintech en el comando Card_Insercion
  24          ------------------------------------------------------------------------------*/
  25          
  26          #define Habilita        0x30
  27          #define Inhabilita      0x31
  28          
  29          /*------------------------------------------------------------------------------
  30          Definicion de Lintech en el comando mover tarjeta (Mov_Card)
  31          ------------------------------------------------------------------------------*/
  32          
  33          #define   MovPos_Front        '0'   
  34          #define   MovPos_IC           '1'
  35          #define   MovPos_RF           '2'
  36          #define   MovPos_Capture      '3'
  37          #define   MovPos_EjectFront   '9'
  38          
  39          
  40          /*----------------------------------------------------------------------------
  41          definicion de recepcion serial 
  42          ------------------------------------------------------------------------------*/
  43          
  44          #define  ESPERA_RX          0           //espera el primer cmd de recepcion del verificado 
  45          
  46          
  47          /*funciones portotipo*/
  48          extern void Debug_txt_Tibbo(unsigned char * str);
  49          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  50          extern void EscribirCadenaSoft_buffer(unsigned char *buffer,unsigned char tamano_cadena);
  51          extern void Debug_chr_Tibbo(unsigned char Dat);
  52          extern unsigned char Dir_board();
  53          
  54          /*atributos */
C51 COMPILER V9.59.0.0   LINTECH                                                           05/21/2020 14:05:11 PAGE 2   

  55          extern unsigned char g_cEstadoComSoft;
  56          extern unsigned char ValTimeOutCom;
  57          
  58          /*externo bit*/
  59          
  60          extern bit buffer_ready;
  61          /*----------------------------------------------------------------------------
  62          funcion de inicializacion del transporte
  63          
  64          ------------------------------------------------------------------------------*/
  65          
  66          void Inicializa(unsigned char TipoMovimiento)
  67          {
  68   1        unsigned char j, bcc;
  69   1        unsigned char g_scArrTxComSoft[10];
  70   1        bcc=0;
  71   1        if ((TipoMovimiento==SIN_MOVIMIENTO)||(TipoMovimiento==TO_FRONT)||(TipoMovimiento==CAPTURE_BOX))
  72   1        {
  73   2          
  74   2          Debug_txt_Tibbo((unsigned char *) "Incializa Dispensador\r\n\r\n");
  75   2          
  76   2          g_scArrTxComSoft[0]=STX_LINTECH;
  77   2          g_scArrTxComSoft[1]=0X00;
  78   2          g_scArrTxComSoft[2]=0X00;
  79   2          g_scArrTxComSoft[3]=0X03;
  80   2          g_scArrTxComSoft[4]='C';
  81   2          g_scArrTxComSoft[5]='0';
  82   2          g_scArrTxComSoft[6]=TipoMovimiento;
  83   2          g_scArrTxComSoft[7]=ETX;
  84   2          for (j=0; j<8; j++)
  85   2          {
  86   3            bcc=g_scArrTxComSoft[j]^bcc;
  87   3          }
  88   2          g_scArrTxComSoft[8]=bcc;
  89   2          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
  90   2          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
  91   2          DebugBufferMF(g_scArrTxComSoft,9,0);                /*muestra la trama enviada al pto serie a debug por tibbo*/
  92   2          EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);    /* envio la trama por el pto serie*/
  93   2          ValTimeOutCom=TIME_CARD;
  94   2        }
  95   1      }
  96          
  97          /*------------------------------------------------------------------------------
  98          cmd de lintech que responde en que estado de los sensores se encuentra
  99          
 100          (30) solo envia el resumen de los sensores
 101          (31) da un reporte detallado de los sensores
 102          S_DETAIL        0x31
 103          S_NORMAL        0x30
 104          detalle=s_detail
 105          ------------------------------------------------------------------------------*/
 106          
 107          void Check_Status(unsigned char Detalle)
 108          {
 109   1        unsigned char j, bcc;
 110   1        unsigned char g_scArrTxComSoft[10];
 111   1        Debug_txt_Tibbo((unsigned char *) "Check_Status\r\n");
 112   1      
 113   1        bcc=0;
 114   1      
 115   1        g_scArrTxComSoft[0]=STX_LINTECH;
 116   1        g_scArrTxComSoft[1]=0X00;
C51 COMPILER V9.59.0.0   LINTECH                                                           05/21/2020 14:05:11 PAGE 3   

 117   1        g_scArrTxComSoft[2]=0X00;
 118   1        g_scArrTxComSoft[3]=0X03;
 119   1        g_scArrTxComSoft[4]='C';
 120   1        g_scArrTxComSoft[5]='1';
 121   1        g_scArrTxComSoft[6]=Detalle;
 122   1        g_scArrTxComSoft[7]=ETX;
 123   1        for (j=0; j<8; j++)
 124   1        {
 125   2          bcc=g_scArrTxComSoft[j]^bcc;
 126   2        }
 127   1        g_scArrTxComSoft[8]=bcc;
 128   1        buffer_ready=0;
 129   1        g_cEstadoComSoft=ESPERA_RX;
 130   1        DebugBufferMF(g_scArrTxComSoft,9,0);
 131   1        EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);
 132   1        ValTimeOutCom=TIME_CARD;
 133   1      }
 134          
 135          /*------------------------------------------------------------------------------
 136          Procedimiento que habilita la insercion o inhabilita la insersion
 137          (31) inhabilita
 138          (30) habilita
 139          tipo=1 habilita la insercion de tarjeta
 140          tipo=0 inhabilita la insersion
 141          ------------------------------------------------------------------------------*/
 142          
 143          void Card_Insercion(char Tipo)
 144          {
 145   1        unsigned char j, bcc;
 146   1        unsigned char g_scArrTxComSoft[10];
 147   1        if (Tipo==Habilita)
 148   1        {
 149   2          Debug_txt_Tibbo((unsigned char *) "Habilita Insersion\r\n");
 150   2          g_scArrTxComSoft[6]=Habilita;
 151   2        }
 152   1        else
 153   1        {
 154   2          
 155   2          Debug_txt_Tibbo((unsigned char *) "Inhabilita Insersion\r\n");
 156   2          g_scArrTxComSoft[6]=Inhabilita;
 157   2        
 158   2        }
 159   1      
 160   1        bcc=0;
 161   1      
 162   1        g_scArrTxComSoft[0]=0xF2;
 163   1        g_scArrTxComSoft[1]=0X00;
 164   1        g_scArrTxComSoft[2]=0X00;
 165   1        g_scArrTxComSoft[3]=0X03;
 166   1        g_scArrTxComSoft[4]='C';
 167   1        g_scArrTxComSoft[5]='3';
 168   1      
 169   1        g_scArrTxComSoft[7]=ETX;
 170   1        for (j=0; j<8; j++)
 171   1        {
 172   2          bcc=g_scArrTxComSoft[j]^bcc;
 173   2        }
 174   1      
 175   1        g_scArrTxComSoft[8]=bcc;
 176   1      
 177   1        buffer_ready=0;
 178   1        g_cEstadoComSoft=ESPERA_RX;
C51 COMPILER V9.59.0.0   LINTECH                                                           05/21/2020 14:05:11 PAGE 4   

 179   1        DebugBufferMF(g_scArrTxComSoft,9,0);
 180   1        EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);
 181   1        ValTimeOutCom=TIME_CARD;
 182   1      }
 183          
 184          /*------------------------------------------------------------------------------
 185          CMD q mueve la tarjeta 
 186            MovPos_Front        '0'   
 187            MovPos_IC           '1'
 188            MovPos_RF           '2'
 189            MovPos_Capture      '3'
 190            MovPos_EjectFront   '9'
 191          ------------------------------------------------------------------------------*/
 192          
 193          void Mov_Card(unsigned char Posicion)
 194          {
 195   1        unsigned char j, bcc;
 196   1        unsigned char g_scArrTxComSoft[10];
 197   1        bcc=0;
 198   1      
 199   1        if ((Posicion==MovPos_RF)||(Posicion==MovPos_IC)||(Posicion==MovPos_Front)||(Posicion==MovPos_EjectFront
             -)||(Posicion==MovPos_Capture))
 200   1        {
 201   2          if (Posicion==MovPos_RF)
 202   2          {
 203   3            Debug_txt_Tibbo((unsigned char *) "Moviendo Tarjeta a RF\r\n");
 204   3          }
 205   2          else if (Posicion==MovPos_IC)
 206   2          {
 207   3            Debug_txt_Tibbo((unsigned char *) "Moviendo Tarjeta a IC\\r\n");
 208   3            }
 209   2          else if (Posicion==MovPos_Front)
 210   2          {
 211   3            Debug_txt_Tibbo((unsigned char *) "Moviendo Tarjeta a Bezel\r\n");
 212   3          }
 213   2          else if (Posicion==MovPos_EjectFront)
 214   2          {
 215   3            Debug_txt_Tibbo((unsigned char *) "Expulsando Tarjeta\r\n");
 216   3          }
 217   2          else if (Posicion==MovPos_Capture)
 218   2          {
 219   3            Debug_txt_Tibbo((unsigned char *) "Capturando Tarjeta\r\n");
 220   3          }
 221   2      
 222   2          g_scArrTxComSoft[0]=STX_LINTECH;
 223   2          g_scArrTxComSoft[1]=0X00;
 224   2          g_scArrTxComSoft[2]=0X00;
 225   2          g_scArrTxComSoft[3]=0X03;
 226   2          g_scArrTxComSoft[4]='C';
 227   2          g_scArrTxComSoft[5]='2';
 228   2          g_scArrTxComSoft[6]=Posicion;
 229   2          g_scArrTxComSoft[7]=ETX;
 230   2          for (j=0; j<8; j++)
 231   2          {
 232   3            bcc=g_scArrTxComSoft[j]^bcc;
 233   3          }
 234   2          g_scArrTxComSoft[8]=bcc;
 235   2          buffer_ready=0;
 236   2          g_cEstadoComSoft=ESPERA_RX;
 237   2          DebugBufferMF(g_scArrTxComSoft,9,0);
 238   2          EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);
 239   2          ValTimeOutCom=TIME_CARD;
C51 COMPILER V9.59.0.0   LINTECH                                                           05/21/2020 14:05:11 PAGE 5   

 240   2        }
 241   1      
 242   1      }
 243          
 244          //*******************************************************************************************
 245          // rutina q mira el tipo de tarjeta si es valido para el uso  
 246          //*******************************************************************************************
 247          
 248          void Aut_Card_check_Status(void)
 249          {
 250   1      unsigned char j, bcc;
 251   1      unsigned char g_scArrTxComSoft[10];
 252   1            bcc=0;
 253   1        
 254   1        Debug_txt_Tibbo((unsigned char *) "Aut_Card_check_Status\r\n");
 255   1        
 256   1        g_scArrTxComSoft[0]=STX_LINTECH;
 257   1          g_scArrTxComSoft[1]=0X00;
 258   1          g_scArrTxComSoft[2]=0X00;
 259   1          g_scArrTxComSoft[3]=0X03;
 260   1          g_scArrTxComSoft[4]='C';
 261   1          g_scArrTxComSoft[5]=0x50;
 262   1          g_scArrTxComSoft[6]=0x31;
 263   1          g_scArrTxComSoft[7]=ETX;
 264   1            for (j=0; j<8; j++)
 265   1          {
 266   2            bcc=g_scArrTxComSoft[j]^bcc;
 267   2          }
 268   1          g_scArrTxComSoft[8]=bcc;
 269   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 270   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 271   1          DebugBufferMF(g_scArrTxComSoft,9,0);                /*muestra la trama enviada al pto serie a debug por tibbo*/
 272   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);    /* envio la trama por el pto serie*/
 273   1          ValTimeOutCom=TIME_CARD;
 274   1        } 
 275          
 276          /*------------------------------------------------------------------------------
 277          CMD q programa la clave en el verificador o transporte
 278          ------------------------------------------------------------------------------*/
 279          
 280            void Dwload_EEprom (void)
 281          {
 282   1        unsigned char j, bcc;
 283   1        unsigned char g_scArrTxComSoft[21];
 284   1        bcc=0;
 285   1        Debug_txt_Tibbo((unsigned char *) "Download MF EEprom\r\n");
 286   1        
 287   1        g_scArrTxComSoft[0]=0xF2;
 288   1        g_scArrTxComSoft[1]=0X00;
 289   1        g_scArrTxComSoft[2]=0X00;
 290   1        g_scArrTxComSoft[3]=0X0E;
 291   1        g_scArrTxComSoft[4]='C';
 292   1        g_scArrTxComSoft[5]=0x60;
 293   1        g_scArrTxComSoft[6]='3';
 294   1        g_scArrTxComSoft[7]=0x00;
 295   1        g_scArrTxComSoft[8]=0Xd0;
 296   1        g_scArrTxComSoft[9]=0X00;
 297   1        g_scArrTxComSoft[10]=0X01;
 298   1        g_scArrTxComSoft[11]=0x06;
 299   1        g_scArrTxComSoft[12]='3';
 300   1        g_scArrTxComSoft[13]='V';
 301   1        g_scArrTxComSoft[14]='0';
C51 COMPILER V9.59.0.0   LINTECH                                                           05/21/2020 14:05:11 PAGE 6   

 302   1        g_scArrTxComSoft[15]='p';
 303   1        g_scArrTxComSoft[16]='4';
 304   1        g_scArrTxComSoft[17]='r';
 305   1        g_scArrTxComSoft[18]=ETX;
 306   1        
 307   1        for (j=0; j<19; j++)
 308   1          {
 309   2            bcc=g_scArrTxComSoft[j]^bcc;
 310   2          }
 311   1          g_scArrTxComSoft[19]=bcc;
 312   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 313   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 314   1          DebugBufferMF(g_scArrTxComSoft,20,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 315   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,20);   /* envio la trama por el pto serie*/
 316   1          ValTimeOutCom=TIME_CARD;
 317   1      }
 318          
 319          /*------------------------------------------------------------------------------
 320          Funcion q verifica si la clave y la carga en el transporte
 321          ------------------------------------------------------------------------------*/
 322          
 323          void LoadVerify_EEprom(void)
 324          {
 325   1        unsigned char j, bcc;
 326   1        unsigned char g_scArrTxComSoft[15];
 327   1        bcc=0;
 328   1        Debug_txt_Tibbo((unsigned char *) "Carga y Verifica de EEprom\r\n");
 329   1      
 330   1      
 331   1        g_scArrTxComSoft[0]=0xF2;
 332   1        g_scArrTxComSoft[1]=0X00;
 333   1        g_scArrTxComSoft[2]=0X00;
 334   1        g_scArrTxComSoft[3]=0X07;
 335   1        g_scArrTxComSoft[4]='C';
 336   1        g_scArrTxComSoft[5]=0x60;
 337   1        g_scArrTxComSoft[6]='3';
 338   1        g_scArrTxComSoft[7]=0x00;
 339   1        g_scArrTxComSoft[8]=0x21;
 340   1        g_scArrTxComSoft[9]=0x00;
 341   1        g_scArrTxComSoft[10]=0x01;
 342   1        g_scArrTxComSoft[11]=ETX;
 343   1        g_scArrTxComSoft[12]=0xc6;
 344   1      
 345   1        
 346   1      
 347   1        for (j=0; j<13; j++)
 348   1          {
 349   2            bcc=g_scArrTxComSoft[j]^bcc;
 350   2          }
 351   1          g_scArrTxComSoft[13]=bcc;
 352   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 353   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 354   1          DebugBufferMF(g_scArrTxComSoft,14,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 355   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,14);   /* envio la trama por el pto serie*/
 356   1          ValTimeOutCom=TIME_CARD;
 357   1          
 358   1      }
 359          
 360          /*------------------------------------------------------------------------------
 361          Funcion q lee la MF dandole el sector y el bloque
 362          ------------------------------------------------------------------------------*/
 363          
C51 COMPILER V9.59.0.0   LINTECH                                                           05/21/2020 14:05:11 PAGE 7   

 364          void RD_MF(unsigned char Sector, unsigned char Bloque)
 365          {
 366   1      
 367   1        unsigned char j, bcc;
 368   1        unsigned char g_scArrTxComSoft[15];
 369   1        bcc=0;
 370   1      
 371   1        Debug_txt_Tibbo((unsigned char *) "Leyendo MF > Sector: ");
 372   1        Debug_chr_Tibbo(Sector);
 373   1        
 374   1        Debug_txt_Tibbo((unsigned char *) " Bloque: ");
 375   1        Debug_chr_Tibbo(Bloque);
 376   1        Debug_txt_Tibbo((unsigned char *) "\r\n");
 377   1      
 378   1      
 379   1        g_scArrTxComSoft[0]=0xF2;
 380   1        g_scArrTxComSoft[1]=0X00;                   
 381   1        g_scArrTxComSoft[2]=0X00;
 382   1        g_scArrTxComSoft[3]=0X08;
 383   1        g_scArrTxComSoft[4]='C';
 384   1        g_scArrTxComSoft[5]=0X60;
 385   1        g_scArrTxComSoft[6]='3';
 386   1        g_scArrTxComSoft[7]=0x00;
 387   1        g_scArrTxComSoft[8]=0xb0;
 388   1        g_scArrTxComSoft[9]=Sector;
 389   1        g_scArrTxComSoft[10]=Bloque;
 390   1        g_scArrTxComSoft[11]=0x01;
 391   1        g_scArrTxComSoft[12]=ETX;
 392   1      
 393   1        for (j=0; j<13; j++)
 394   1        {
 395   2          bcc=g_scArrTxComSoft[j]^bcc;
 396   2        }
 397   1        g_scArrTxComSoft[13]=bcc;
 398   1      
 399   1      
 400   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 401   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 402   1          DebugBufferMF(g_scArrTxComSoft,14,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 403   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,14);   /* envio la trama por el pto serie*/
 404   1          ValTimeOutCom=TIME_CARD;
 405   1      
 406   1      }
 407          
 408          /*------------------------------------------------------------------------------
 409          Funcion q lescribe la MF dandole el sector y el bloque y los datos
 410          ------------------------------------------------------------------------------*/
 411          
 412          
 413          void WR_MF(unsigned char Sector, unsigned char Bloque,unsigned char *buffer)     
 414             
 415          {
 416   1        unsigned char j, bcc;
 417   1        unsigned char g_scArrTxComSoft[31];
 418   1        bcc=0;
 419   1      
 420   1        Debug_txt_Tibbo((unsigned char *) "Escribe MF > Sector: ");
 421   1        Debug_chr_Tibbo(Sector);
 422   1        
 423   1        Debug_txt_Tibbo((unsigned char *) " Bloque: ");
 424   1        Debug_chr_Tibbo(Bloque);
 425   1        Debug_txt_Tibbo((unsigned char *) "\r\n");
C51 COMPILER V9.59.0.0   LINTECH                                                           05/21/2020 14:05:11 PAGE 8   

 426   1                                          
 427   1        g_scArrTxComSoft[0]=0xF2;
 428   1        g_scArrTxComSoft[1]=0X00;                   
 429   1        g_scArrTxComSoft[2]=0X00;
 430   1        g_scArrTxComSoft[3]=24;                                 /* Numero Datos a programar */ 
 431   1        
 432   1        g_scArrTxComSoft[4]='C';
 433   1        g_scArrTxComSoft[5]=0X60;
 434   1        g_scArrTxComSoft[6]='3';
 435   1        g_scArrTxComSoft[7]=0x00;
 436   1        g_scArrTxComSoft[8]=0xd1;
 437   1        g_scArrTxComSoft[9]=Sector;                             //Sector;
 438   1        g_scArrTxComSoft[10]=Bloque;                            //Bloque;
 439   1        g_scArrTxComSoft[11]=0x01;
 440   1      
 441   1          for (j=0; j<=16; ++j)
 442   1            {
 443   2              g_scArrTxComSoft[j+12]=*(buffer + j); 
 444   2            }
 445   1        
 446   1        g_scArrTxComSoft[28]=ETX;
 447   1        
 448   1        for (j=0; j<=28; j++)
 449   1        {
 450   2          bcc=bcc^g_scArrTxComSoft[j];
 451   2        }
 452   1        g_scArrTxComSoft[29]=bcc;
 453   1      
 454   1        
 455   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 456   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 457   1          DebugBufferMF(g_scArrTxComSoft,30,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 458   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,30);   /* envio la trama por el pto serie*/
 459   1          ValTimeOutCom=TIME_CARD;
 460   1        
 461   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1553    ----
   CONSTANT SIZE    =    334    ----
   XDATA SIZE       =   ----     149
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
