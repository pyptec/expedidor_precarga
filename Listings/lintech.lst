C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LINTECH
OBJECT MODULE PLACED IN .\Objects\lintech.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lintech.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\lintech.lst) TABS(2) OBJECT(.\Objects\lintech.obj)

line level    source

   1          #include<lintech.h>
   2          /*----------------------------------------------------------------------------
   3          tiempo de delay entre funciones
   4          ------------------------------------------------------------------------------*/
   5          
   6          #define   TIME_CARD         100   //50
   7          #define   TIME_MOV          150
   8          /*----------------------------------------------------------------------------
   9          definicion de datos de trama lintech
  10          ------------------------------------------------------------------------------*/
  11          
  12          #define   ETX               03
  13          #define   STX_LINTECH       0xf2
  14          /*------------------------------------------------------------------------------
  15          Definicion de Lintech en el comando Inicializa
  16          ------------------------------------------------------------------------------*/
  17          
  18          #define TO_FRONT        '0'
  19          #define CAPTURE_BOX     '1'
  20          #define SIN_MOVIMIENTO  '3'
  21          
  22          /*------------------------------------------------------------------------------
  23           definiciones de lintech en el comando Card_Insercion
  24          ------------------------------------------------------------------------------*/
  25          
  26          #define Habilita        0x30
  27          #define Inhabilita      0x31
  28          
  29          /*------------------------------------------------------------------------------
  30          Definicion de Lintech en el comando mover tarjeta (Mov_Card)
  31          ------------------------------------------------------------------------------*/
  32          
  33          #define   MovPos_Front        '0'   
  34          #define   MovPos_IC           '1'
  35          #define   MovPos_RF           '2'
  36          #define   MovPos_Capture      '3'
  37          #define   MovPos_EjectFront   '9'
  38          
  39          
  40          #define SENSOR_DETAIL       0x31
  41          #define SENSOR_NORMAL       0x30
  42          /*----------------------------------------------------------------------------
  43          definicion de recepcion serial 
  44          ------------------------------------------------------------------------------*/
  45          
  46          #define  ESPERA_RX          0           //espera el primer cmd de recepcion del verificado 
  47          
  48          
  49          /*funciones portotipo*/
  50          extern void Debug_txt_Tibbo(unsigned char * str);
  51          extern void DebugBufferMF(unsigned char *str,unsigned char num_char,char io);
  52          extern void EscribirCadenaSoft_buffer(unsigned char *buffer,unsigned char tamano_cadena);
  53          extern void Debug_chr_Tibbo(unsigned char Dat);
  54          extern unsigned char Dir_board();
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 2   

  55          
  56          /*atributos */
  57          extern unsigned char g_cEstadoComSoft;
  58          extern unsigned char ValTimeOutCom;
  59          void Dwload_EEprom_prog(unsigned char *password);
  60          
  61          /*externo bit*/
  62          
  63          extern bit buffer_ready;
  64          /*----------------------------------------------------------------------------
  65          funcion de inicializacion del transporte
  66          
  67          ------------------------------------------------------------------------------*/
  68          
  69          void Inicializa(unsigned char TipoMovimiento)
  70          {
  71   1        unsigned char j, bcc;
  72   1        unsigned char g_scArrTxComSoft[10];
  73   1        bcc=0;
  74   1        if ((TipoMovimiento==SIN_MOVIMIENTO)||(TipoMovimiento==TO_FRONT)||(TipoMovimiento==CAPTURE_BOX))
  75   1        {
  76   2          
  77   2          Debug_txt_Tibbo((unsigned char *) "Inicializa Dispensador\r\n");
  78   2          
  79   2          g_scArrTxComSoft[0]=STX_LINTECH;
  80   2          g_scArrTxComSoft[1]=0X00;
  81   2          g_scArrTxComSoft[2]=0X00;
  82   2          g_scArrTxComSoft[3]=0X03;
  83   2          g_scArrTxComSoft[4]='C';
  84   2          g_scArrTxComSoft[5]='0';
  85   2          g_scArrTxComSoft[6]=TipoMovimiento;
  86   2          g_scArrTxComSoft[7]=ETX;
  87   2          for (j=0; j<8; j++)
  88   2          {
  89   3            bcc=g_scArrTxComSoft[j]^bcc;
  90   3          }
  91   2          g_scArrTxComSoft[8]=bcc;
  92   2          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
  93   2          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
  94   2          DebugBufferMF(g_scArrTxComSoft,9,0);                /*muestra la trama enviada al pto serie a debug por tibbo*/
  95   2          EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);    /* envio la trama por el pto serie*/
  96   2          ValTimeOutCom=TIME_CARD;
  97   2        }
  98   1      }
  99          
 100          /*------------------------------------------------------------------------------
 101          cmd de lintech que responde en que estado de los sensores se encuentra
 102          
 103          (30) solo envia el resumen de los sensores
 104          (31) da un reporte detallado de los sensores
 105          S_DETAIL        0x31
 106          S_NORMAL        0x30
 107          detalle=s_detail
 108          ------------------------------------------------------------------------------*/
 109          
 110          void Check_Status(unsigned char Detalle)
 111          {
 112   1        unsigned char j, bcc;
 113   1        unsigned char g_scArrTxComSoft[10];
 114   1      
 115   1        if (Detalle == SENSOR_NORMAL)
 116   1          {
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 3   

 117   2            Debug_txt_Tibbo((unsigned char *) "Check_Status SENSOR_NORMAL\r\n");
 118   2          }
 119   1          else
 120   1          {
 121   2            Debug_txt_Tibbo((unsigned char *) "Check_Status SENSOR_DETAIL\r\n");
 122   2          }
 123   1        bcc=0;
 124   1      
 125   1        g_scArrTxComSoft[0]=STX_LINTECH;
 126   1        g_scArrTxComSoft[1]=0X00;
 127   1        g_scArrTxComSoft[2]=0X00;
 128   1        g_scArrTxComSoft[3]=0X03;
 129   1        g_scArrTxComSoft[4]='C';
 130   1        g_scArrTxComSoft[5]='1';
 131   1        g_scArrTxComSoft[6]=Detalle;
 132   1        g_scArrTxComSoft[7]=ETX;
 133   1        for (j=0; j<8; j++)
 134   1        {
 135   2          bcc=g_scArrTxComSoft[j]^bcc;
 136   2        }
 137   1        g_scArrTxComSoft[8]=bcc;
 138   1        buffer_ready=0;
 139   1        g_cEstadoComSoft=ESPERA_RX;
 140   1        DebugBufferMF(g_scArrTxComSoft,9,0);
 141   1        EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);
 142   1        ValTimeOutCom=TIME_CARD;
 143   1      }
 144          
 145          /*------------------------------------------------------------------------------
 146          Procedimiento que habilita la insercion o inhabilita la insersion
 147          (31) inhabilita
 148          (30) habilita
 149          tipo=1 habilita la insercion de tarjeta
 150          tipo=0 inhabilita la insersion
 151          ------------------------------------------------------------------------------*/
 152          
 153          void Card_Insercion(char Tipo)
 154          {
 155   1        unsigned char j, bcc;
 156   1        unsigned char g_scArrTxComSoft[10];
 157   1        if (Tipo==Habilita)
 158   1        {
 159   2          Debug_txt_Tibbo((unsigned char *) "Habilita Insersion\r\n");
 160   2          g_scArrTxComSoft[6]=Habilita;
 161   2        }
 162   1        else
 163   1        {
 164   2          
 165   2          Debug_txt_Tibbo((unsigned char *) "Inhabilita Insersion\r\n");
 166   2          g_scArrTxComSoft[6]=Inhabilita;
 167   2        
 168   2        }
 169   1      
 170   1        bcc=0;
 171   1      
 172   1        g_scArrTxComSoft[0]=0xF2;
 173   1        g_scArrTxComSoft[1]=0X00;
 174   1        g_scArrTxComSoft[2]=0X00;
 175   1        g_scArrTxComSoft[3]=0X03;
 176   1        g_scArrTxComSoft[4]='C';
 177   1        g_scArrTxComSoft[5]='3';
 178   1      
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 4   

 179   1        g_scArrTxComSoft[7]=ETX;
 180   1        for (j=0; j<8; j++)
 181   1        {
 182   2          bcc=g_scArrTxComSoft[j]^bcc;
 183   2        }
 184   1      
 185   1        g_scArrTxComSoft[8]=bcc;
 186   1      
 187   1        buffer_ready=0;
 188   1        g_cEstadoComSoft=ESPERA_RX;
 189   1        DebugBufferMF(g_scArrTxComSoft,9,0);
 190   1        EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);
 191   1        ValTimeOutCom=TIME_CARD;
 192   1      }
 193          
 194          /*------------------------------------------------------------------------------
 195          CMD q mueve la tarjeta 
 196            MovPos_Front        '0'   
 197            MovPos_IC           '1'
 198            MovPos_RF           '2'
 199            MovPos_Capture      '3'
 200            MovPos_EjectFront   '9'
 201          ------------------------------------------------------------------------------*/
 202          
 203          void Mov_Card(unsigned char Posicion)
 204          {
 205   1        unsigned char j, bcc;
 206   1        unsigned char g_scArrTxComSoft[10];
 207   1        bcc=0;
 208   1      
 209   1        if ((Posicion==MovPos_RF)||(Posicion==MovPos_IC)||(Posicion==MovPos_Front)||(Posicion==MovPos_EjectFront
             -)||(Posicion==MovPos_Capture))
 210   1        {
 211   2          if (Posicion==MovPos_RF)
 212   2          {
 213   3            Debug_txt_Tibbo((unsigned char *) "Moviendo Tarjeta a RF\r\n");
 214   3          }
 215   2          else if (Posicion==MovPos_IC)
 216   2          {
 217   3            Debug_txt_Tibbo((unsigned char *) "Moviendo Tarjeta a IC\\r\n");
 218   3            }
 219   2          else if (Posicion==MovPos_Front)
 220   2          {
 221   3            Debug_txt_Tibbo((unsigned char *) "Moviendo Tarjeta a Bezel\r\n");
 222   3          }
 223   2          else if (Posicion==MovPos_EjectFront)
 224   2          {
 225   3            Debug_txt_Tibbo((unsigned char *) "Expulsando Tarjeta\r\n");
 226   3          }
 227   2          else if (Posicion==MovPos_Capture)
 228   2          {
 229   3            Debug_txt_Tibbo((unsigned char *) "Capturando Tarjeta\r\n");
 230   3          }
 231   2      
 232   2          g_scArrTxComSoft[0]=STX_LINTECH;
 233   2          g_scArrTxComSoft[1]=0X00;
 234   2          g_scArrTxComSoft[2]=0X00;
 235   2          g_scArrTxComSoft[3]=0X03;
 236   2          g_scArrTxComSoft[4]='C';
 237   2          g_scArrTxComSoft[5]='2';
 238   2          g_scArrTxComSoft[6]=Posicion;
 239   2          g_scArrTxComSoft[7]=ETX;
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 5   

 240   2          for (j=0; j<8; j++)
 241   2          {
 242   3            bcc=g_scArrTxComSoft[j]^bcc;
 243   3          }
 244   2          g_scArrTxComSoft[8]=bcc;
 245   2          buffer_ready=0;
 246   2          g_cEstadoComSoft=ESPERA_RX;
 247   2          DebugBufferMF(g_scArrTxComSoft,9,0);
 248   2          EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);
 249   2          ValTimeOutCom=TIME_CARD;
 250   2        }
 251   1      
 252   1      }
 253          
 254          //*******************************************************************************************
 255          // rutina q mira el tipo de tarjeta si es valido para el uso  
 256          //*******************************************************************************************
 257          
 258          void Aut_Card_check_Status(void)
 259          {
 260   1      unsigned char j, bcc;
 261   1      unsigned char g_scArrTxComSoft[10];
 262   1            bcc=0;
 263   1        
 264   1        Debug_txt_Tibbo((unsigned char *) "Aut_Card_check_Status\r\n");
 265   1        
 266   1        g_scArrTxComSoft[0]=STX_LINTECH;
 267   1          g_scArrTxComSoft[1]=0X00;
 268   1          g_scArrTxComSoft[2]=0X00;
 269   1          g_scArrTxComSoft[3]=0X03;
 270   1          g_scArrTxComSoft[4]='C';
 271   1          g_scArrTxComSoft[5]=0x50;
 272   1          g_scArrTxComSoft[6]=0x31;
 273   1          g_scArrTxComSoft[7]=ETX;
 274   1            for (j=0; j<8; j++)
 275   1          {
 276   2            bcc=g_scArrTxComSoft[j]^bcc;
 277   2          }
 278   1          g_scArrTxComSoft[8]=bcc;
 279   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 280   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 281   1          DebugBufferMF(g_scArrTxComSoft,9,0);                /*muestra la trama enviada al pto serie a debug por tibbo*/
 282   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);    /* envio la trama por el pto serie*/
 283   1          ValTimeOutCom=TIME_CARD;
 284   1        } 
 285          /*  ------------------------------------------------------------------------------
 286            ------------------------------------------------------------------------------*/
 287          void Clave_Seguridad_S2(void)
 288          {
 289   1        unsigned char j, bcc;
 290   1        unsigned char g_scArrTxComSoft[21];
 291   1            bcc=0;
 292   1        Debug_txt_Tibbo((unsigned char *) "Clave Seguridad S2\r\n");
 293   1      
 294   1      
 295   1        g_scArrTxComSoft[0]=STX_LINTECH;
 296   1        g_scArrTxComSoft[1]=0X00;
 297   1        g_scArrTxComSoft[2]=0X00;
 298   1        g_scArrTxComSoft[3]=0X0e; // Numero Datos
 299   1        g_scArrTxComSoft[4]='C';
 300   1        g_scArrTxComSoft[5]=0x60;
 301   1        g_scArrTxComSoft[6]='3';
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 6   

 302   1        g_scArrTxComSoft[7]=0x00;
 303   1        g_scArrTxComSoft[8]=0x20;
 304   1          g_scArrTxComSoft[9]=0x00;
 305   1        g_scArrTxComSoft[10]=0x02;
 306   1      
 307   1        g_scArrTxComSoft[11]=0x06;
 308   1      
 309   1        g_scArrTxComSoft[12]=0x41;
 310   1        g_scArrTxComSoft[13]=0x63;
 311   1        g_scArrTxComSoft[14]=0x53;
 312   1          g_scArrTxComSoft[15]=0x45;
 313   1        g_scArrTxComSoft[16]=0x76;
 314   1        g_scArrTxComSoft[17]=0x50;
 315   1      
 316   1      
 317   1        g_scArrTxComSoft[18]=ETX;
 318   1        
 319   1          for (j=0; j<19; j++)
 320   1          {
 321   2            bcc=g_scArrTxComSoft[j]^bcc;
 322   2          }
 323   1          g_scArrTxComSoft[19]=bcc;
 324   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 325   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 326   1          DebugBufferMF(g_scArrTxComSoft,20,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 327   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,20);   /* envio la trama por el pto serie*/
 328   1          ValTimeOutCom=TIME_CARD;
 329   1        
 330   1      
 331   1      }
 332          /*------------------------------------------------------------------------------
 333          CMD q programa la clave en el verificador o transporte
 334          ------------------------------------------------------------------------------*/
 335          
 336            void Dwload_EEprom (void)
 337          {
 338   1        unsigned char j, bcc;
 339   1        unsigned char g_scArrTxComSoft[21];
 340   1        bcc=0;
 341   1        Debug_txt_Tibbo((unsigned char *) "Download MF EEprom\r\n");
 342   1        
 343   1        g_scArrTxComSoft[0]=0xF2;
 344   1        g_scArrTxComSoft[1]=0X00;
 345   1        g_scArrTxComSoft[2]=0X00;
 346   1        g_scArrTxComSoft[3]=0X0E;
 347   1        g_scArrTxComSoft[4]='C';
 348   1        g_scArrTxComSoft[5]=0x60;
 349   1        g_scArrTxComSoft[6]='3';
 350   1        g_scArrTxComSoft[7]=0x00;
 351   1        g_scArrTxComSoft[8]=0Xd0;
 352   1        g_scArrTxComSoft[9]=0X00;
 353   1        g_scArrTxComSoft[10]=0X01;
 354   1        g_scArrTxComSoft[11]=0x06;
 355   1        g_scArrTxComSoft[12]='3'; //33
 356   1        g_scArrTxComSoft[13]='V';//56
 357   1        g_scArrTxComSoft[14]='0';//30
 358   1        g_scArrTxComSoft[15]='p';//70
 359   1        g_scArrTxComSoft[16]='4';//34
 360   1        g_scArrTxComSoft[17]='r';//72
 361   1        g_scArrTxComSoft[18]=ETX;
 362   1        
 363   1        for (j=0; j<19; j++)
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 7   

 364   1          {
 365   2            bcc=g_scArrTxComSoft[j]^bcc;
 366   2          }
 367   1          g_scArrTxComSoft[19]=bcc;
 368   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 369   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 370   1          DebugBufferMF(g_scArrTxComSoft,20,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 371   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,20);   /* envio la trama por el pto serie*/
 372   1          ValTimeOutCom=TIME_CARD;
 373   1      }
 374          /*
 375            void Dwload_EEprom_prog(unsigned char *password)
 376            {
 377              unsigned char j, bcc;
 378            unsigned char g_scArrTxComSoft[21];
 379            bcc=0;
 380            Debug_txt_Tibbo((unsigned char *) "Download MF EEprom\r\n");
 381            
 382            g_scArrTxComSoft[0]=0xF2;
 383            g_scArrTxComSoft[1]=0X00;
 384            g_scArrTxComSoft[2]=0X00;
 385            g_scArrTxComSoft[3]=0X0E;
 386            g_scArrTxComSoft[4]='C';
 387            g_scArrTxComSoft[5]=0x60;
 388            g_scArrTxComSoft[6]='3';
 389            g_scArrTxComSoft[7]=0x00;
 390            g_scArrTxComSoft[8]=0Xd0;
 391            g_scArrTxComSoft[9]=0X00;
 392            g_scArrTxComSoft[10]=0X01;
 393            g_scArrTxComSoft[11]=0x06;
 394            g_scArrTxComSoft[12]=*password; //33
 395            g_scArrTxComSoft[13]=*(password+1);//56
 396            g_scArrTxComSoft[14]=*(password+2);//30
 397            g_scArrTxComSoft[15]=*(password+3);//70
 398            g_scArrTxComSoft[16]=*(password+4);//34
 399            g_scArrTxComSoft[17]=*(password+5);//72
 400            g_scArrTxComSoft[18]=ETX;
 401            
 402            for (j=0; j<19; j++)
 403              {
 404                bcc=g_scArrTxComSoft[j]^bcc;
 405              }
 406              g_scArrTxComSoft[19]=bcc;
 407              buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 408            //  g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 409            //  DebugBufferMF(g_scArrTxComSoft,20,0);               /*muestra la trama enviada al pto serie a debug por tibbo
             -*/
 410            //  EscribirCadenaSoft_buffer(g_scArrTxComSoft,20);   /* envio la trama por el pto serie*/
 411            //  ValTimeOutCom=TIME_CARD;
 412            //}*/
 413          /*------------------------------------------------------------------------------
 414          Funcion q verifica si la clave y la carga en el transporte
 415          ------------------------------------------------------------------------------*/
 416          
 417          void LoadVerify_EEprom(void)
 418          {
 419   1        unsigned char j, bcc;
 420   1        unsigned char g_scArrTxComSoft[15];
 421   1        bcc=0;
 422   1        Debug_txt_Tibbo((unsigned char *) "Carga y Verifica de EEprom\r\n");
 423   1      
 424   1      
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 8   

 425   1        g_scArrTxComSoft[0]=0xF2;
 426   1        g_scArrTxComSoft[1]=0X00;
 427   1        g_scArrTxComSoft[2]=0X00;
 428   1        g_scArrTxComSoft[3]=0X07;
 429   1        g_scArrTxComSoft[4]='C';
 430   1        g_scArrTxComSoft[5]=0x60;
 431   1        g_scArrTxComSoft[6]='3';
 432   1        g_scArrTxComSoft[7]=0x00;
 433   1        g_scArrTxComSoft[8]=0x21;
 434   1        g_scArrTxComSoft[9]=0x00;
 435   1        g_scArrTxComSoft[10]=0x01;
 436   1        g_scArrTxComSoft[11]=ETX;
 437   1        
 438   1      
 439   1        
 440   1      
 441   1        for (j=0; j<12; j++)
 442   1          {
 443   2            bcc=g_scArrTxComSoft[j]^bcc;
 444   2          }
 445   1          g_scArrTxComSoft[12]=bcc;
 446   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 447   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 448   1          DebugBufferMF(g_scArrTxComSoft,13,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 449   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,13);   /* envio la trama por el pto serie*/
 450   1          ValTimeOutCom=TIME_CARD;
 451   1          
 452   1      }
 453          
 454          /*------------------------------------------------------------------------------
 455          Funcion q lee la MF dandole el sector y el bloque
 456          ------------------------------------------------------------------------------*/
 457          
 458          void RD_MF(unsigned char Sector, unsigned char Bloque)
 459          {
 460   1      
 461   1        unsigned char j, bcc;
 462   1        unsigned char g_scArrTxComSoft[15];
 463   1        bcc=0;
 464   1      
 465   1        Debug_txt_Tibbo((unsigned char *) "Leyendo MF > Sector: ");
 466   1        Debug_chr_Tibbo(Sector);
 467   1        
 468   1        Debug_txt_Tibbo((unsigned char *) " Bloque: ");
 469   1        Debug_chr_Tibbo(Bloque);
 470   1        Debug_txt_Tibbo((unsigned char *) "\r\n");
 471   1      
 472   1      
 473   1        g_scArrTxComSoft[0]=0xF2;
 474   1        g_scArrTxComSoft[1]=0X00;                   
 475   1        g_scArrTxComSoft[2]=0X00;
 476   1        g_scArrTxComSoft[3]=0X08;
 477   1        g_scArrTxComSoft[4]='C';
 478   1        g_scArrTxComSoft[5]=0X60;
 479   1        g_scArrTxComSoft[6]='3';
 480   1        g_scArrTxComSoft[7]=0x00;
 481   1        g_scArrTxComSoft[8]=0xb0;
 482   1        g_scArrTxComSoft[9]=Sector;
 483   1        g_scArrTxComSoft[10]=Bloque;
 484   1        g_scArrTxComSoft[11]=0x01;
 485   1        g_scArrTxComSoft[12]=ETX;
 486   1      
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 9   

 487   1        for (j=0; j<13; j++)
 488   1        {
 489   2          bcc=g_scArrTxComSoft[j]^bcc;
 490   2        }
 491   1        g_scArrTxComSoft[13]=bcc;
 492   1      
 493   1      
 494   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 495   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 496   1          DebugBufferMF(g_scArrTxComSoft,14,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 497   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,14);   /* envio la trama por el pto serie*/
 498   1          ValTimeOutCom=TIME_CARD;
 499   1      
 500   1      }
 501          
 502          /*------------------------------------------------------------------------------
 503          Funcion q lescribe la MF dandole el sector y el bloque y los datos
 504          ------------------------------------------------------------------------------*/
 505          
 506          
 507          void WR_MF(unsigned char Sector, unsigned char Bloque,unsigned char *buffer)     
 508             
 509          {
 510   1        unsigned char j, bcc;
 511   1        unsigned char g_scArrTxComSoft[31];
 512   1        bcc=0;
 513   1      
 514   1        Debug_txt_Tibbo((unsigned char *) "Escribe MF > Sector: ");
 515   1        Debug_chr_Tibbo(Sector);
 516   1        
 517   1        Debug_txt_Tibbo((unsigned char *) " Bloque: ");
 518   1        Debug_chr_Tibbo(Bloque);
 519   1        Debug_txt_Tibbo((unsigned char *) "\r\n");
 520   1                                          
 521   1        g_scArrTxComSoft[0]=0xF2;
 522   1        g_scArrTxComSoft[1]=0X00;                   
 523   1        g_scArrTxComSoft[2]=0X00;
 524   1        g_scArrTxComSoft[3]=24;                                 /* Numero Datos a programar */ 
 525   1        
 526   1        g_scArrTxComSoft[4]='C';
 527   1        g_scArrTxComSoft[5]=0X60;
 528   1        g_scArrTxComSoft[6]='3';
 529   1        g_scArrTxComSoft[7]=0x00;
 530   1        g_scArrTxComSoft[8]=0xd1;
 531   1        g_scArrTxComSoft[9]=Sector;                             //Sector;
 532   1        g_scArrTxComSoft[10]=Bloque;                            //Bloque;
 533   1        g_scArrTxComSoft[11]=0x01;
 534   1      
 535   1          for (j=0; j<=16; ++j)
 536   1            {
 537   2              g_scArrTxComSoft[j+12]=*(buffer + j); 
 538   2            }
 539   1        
 540   1        g_scArrTxComSoft[28]=ETX;
 541   1        
 542   1        for (j=0; j<=28; j++)
 543   1        {
 544   2          bcc=bcc^g_scArrTxComSoft[j];
 545   2        }
 546   1        g_scArrTxComSoft[29]=bcc;
 547   1      
 548   1        
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 10  

 549   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 550   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 551   1          DebugBufferMF(g_scArrTxComSoft,30,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 552   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,30);   /* envio la trama por el pto serie*/
 553   1          ValTimeOutCom=TIME_CARD;
 554   1        
 555   1      }
 556          //*******************************************************************************************
 557          // rutina q mira el tipo de tarjeta si es valido para el uso  
 558          //*******************************************************************************************
 559          
 560          void Unique_Identifier_UID(void)
 561          {
 562   1      unsigned char j, bcc;
 563   1      unsigned char g_scArrTxComSoft[10];
 564   1            bcc=0;
 565   1        
 566   1        Debug_txt_Tibbo((unsigned char *) "UID\r\n");
 567   1        
 568   1        g_scArrTxComSoft[0]=STX_LINTECH;
 569   1          g_scArrTxComSoft[1]=0X00;
 570   1          g_scArrTxComSoft[2]=0X00;
 571   1          g_scArrTxComSoft[3]=0X05;
 572   1          g_scArrTxComSoft[4]='C';
 573   1          g_scArrTxComSoft[5]=0x60;
 574   1          g_scArrTxComSoft[6]=0x30;
 575   1          g_scArrTxComSoft[7]=0x41;
 576   1          g_scArrTxComSoft[8]=0x30;
 577   1          g_scArrTxComSoft[9]=ETX;
 578   1            for (j=0; j<10; j++)
 579   1          {
 580   2            bcc=g_scArrTxComSoft[j]^bcc;
 581   2          }
 582   1          g_scArrTxComSoft[10]=bcc;
 583   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
 584   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 585   1          DebugBufferMF(g_scArrTxComSoft,11,0);               /*muestra la trama enviada al pto serie a debug por tibbo*/
 586   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,11);   /* envio la trama por el pto serie*/
 587   1          ValTimeOutCom=TIME_CARD;
 588   1        } 
 589          void Power_off(void)
 590          {
 591   1      unsigned char j, bcc;
 592   1      unsigned char g_scArrTxComSoft[10];
 593   1            bcc=0;
 594   1        
 595   1        Debug_txt_Tibbo((unsigned char *) "POWER OFF UID\r\n");
 596   1        
 597   1        g_scArrTxComSoft[0]=STX_LINTECH;
 598   1          g_scArrTxComSoft[1]=0X00;
 599   1          g_scArrTxComSoft[2]=0X00;
 600   1          g_scArrTxComSoft[3]=0X03;
 601   1          g_scArrTxComSoft[4]='C';
 602   1          g_scArrTxComSoft[5]=0x60;
 603   1          g_scArrTxComSoft[6]=0x31;
 604   1          g_scArrTxComSoft[7]=ETX;
 605   1            for (j=0; j<8; j++)
 606   1          {
 607   2            bcc=g_scArrTxComSoft[j]^bcc;
 608   2          }
 609   1          g_scArrTxComSoft[8]=bcc;
 610   1          buffer_ready=0;                                   /* buffer del pto serie (0) inicia a esperar la trama*/
C51 COMPILER V9.59.0.0   LINTECH                                                           09/02/2021 16:32:26 PAGE 11  

 611   1          g_cEstadoComSoft=ESPERA_RX;                       /* Espera el ASK en el pt o serie para empesar a almacenas*/
 612   1          DebugBufferMF(g_scArrTxComSoft,9,0);                /*muestra la trama enviada al pto serie a debug por tibbo*/
 613   1          EscribirCadenaSoft_buffer(g_scArrTxComSoft,9);    /* envio la trama por el pto serie*/
 614   1          ValTimeOutCom=TIME_CARD;
 615   1      
 616   1      
 617   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1993    ----
   CONSTANT SIZE    =    419    ----
   XDATA SIZE       =   ----     193
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
